plot.bathy(bathymetry, land = TRUE, image=TRUE, bpal = gray.colors(10), deepest.isobath = c(-500), shallowest.isobath = c(0), step = c(100), drawlabels = TRUE)
scaleBathy(bathymetry, deg = .10, cex = .5)
points(lat~lon, data = receiver_data, pch = 19, col = 'red', cex = .4)
text(x = receiver_data$lon, y = receiver_data$lat, labels = station_numbers, cex = .5)
plot.bathy(bathymetry, land = TRUE, image=TRUE, bpal = gray.colors(10), deepest.isobath = c(-500), shallowest.isobath = c(0), step = c(100), drawlabels = TRUE)
## Adding scale legend
scaleBathy(bathymetry, deg = .10, cex = .5)
text(x = receiver_data$lon, y = receiver_data$lat, labels = station_numbers, cex = .5)
bathymetry = getNOAA.bathy(lon1 = -157.8,
lon2 = -157.1,
lat1 = 20.8,
lat2 = 21.50,
resolution = 10)
plot.bathy(bathymetry, land = TRUE, image=TRUE, bpal = gray.colors(10), deepest.isobath = c(-500), shallowest.isobath = c(0), step = c(100), drawlabels = TRUE)
bathymetry = getNOAA.bathy(lon1 = -157.8,
lon2 = -157.1,
lat1 = 20.8,
lat2 = 21.00,
resolution = 10)
bathymetry = getNOAA.bathy(lon1 = -157.8,
lon2 = -157.1,
lat1 = 20.8,
lat2 = 22.00,
resolution = 10)
plot.bathy(bathymetry, land = TRUE, image=TRUE, bpal = gray.colors(10), deepest.isobath = c(-500), shallowest.isobath = c(0), step = c(100), drawlabels = TRUE)
bathymetry = getNOAA.bathy(lon1 = -157.5,
lon2 = -157.1,
lat1 = 20.8,
lat2 = 22.00,
resolution = 10)
plot.bathy(bathymetry, land = TRUE, image=TRUE, bpal = gray.colors(10), deepest.isobath = c(-500), shallowest.isobath = c(0), step = c(100), drawlabels = TRUE)
bathymetry = getNOAA.bathy(lon1 = -158.5,
lon2 = -157.1,
lat1 = 20.8,
lat2 = 22.00,
resolution = 10)
plot.bathy(bathymetry, land = TRUE, image=TRUE, bpal = gray.colors(10), deepest.isobath = c(-500), shallowest.isobath = c(0), step = c(100), drawlabels = TRUE)
bathymetry = getNOAA.bathy(lon1 = -158,
lon2 = -157.5,
lat1 = 21.2,
lat2 = 21.65,
resolution = .7)
plot.bathy(bathymetry, land = TRUE, image=TRUE, bpal = gray.colors(10), deepest.isobath = c(-500), shallowest.isobath = c(0), step = c(100), drawlabels = TRUE)
bathymetry = getNOAA.bathy(lon1 = -157.8,
lon2 = -157.5,
lat1 = 21.2,
lat2 = 21.65,
resolution = .7)
plot.bathy(bathymetry, land = TRUE, image=TRUE, bpal = gray.colors(10), deepest.isobath = c(-500), shallowest.isobath = c(0), step = c(100), drawlabels = TRUE)
text(x = receiver_data$lon, y = receiver_data$lat, labels = station_numbers, cex = .5)
bathymetry = getNOAA.bathy(lon1 = -157.8,
lon2 = -157.5,
lat1 = 21.2,
lat2 = 21.5,
resolution = .7)
plot.bathy(bathymetry, land = TRUE, image=TRUE, bpal = gray.colors(10), deepest.isobath = c(-500), shallowest.isobath = c(0), step = c(100), drawlabels = TRUE)
text(x = receiver_data$lon, y = receiver_data$lat, labels = station_numbers, cex = .5)
vue_data = load_vemco('/Users/stephenscherrer/Dropbox/Lab Folder/Oahu Receiver Data Files/VUE_Export_2015-January-11.csv')
vue_data = load_vemco('/Users/stephenscherrer/Dropbox/Lab Folder/Oahu Receiver Data Files/VUE_Export_2016-January-11.csv')
vue_data = load_vemco('/Users/stephenscherrer/Dropbox/Lab Folder/Oahu Receiver Data Files/VUE_Export_2016-January-11.csv')
tag_ids = c(18236:18275, 898:927, 52142:52161, 37935:37955)
?matrix()
?array()
vue_data = load_vemco('/Users/stephenscherrer/Dropbox/Lab Folder/Oahu Receiver Data Files/VUE_Export_2016-January-11.csv')
receiver_data = load_receiver(filename = 'DEPLOYMENT_RECOVERY_LOG.csv', filepath = '/Users/stephenscherrer/Dropbox/Lab Folder/Oahu Receiver Data Files/')
tagging_data = load_tagging_data('/Users/stephenscherrer/Dropbox/Lab Folder/Oahu Receiver Data Files/Bottomfish_Tag_Master.csv')
tag_ids = c(18236:18275, 898:927, 52142:52161, 37935:37955)
tag_ids
vue_data = vue_data[which(vue_data$tag_id %in% tag_ids), ]
vue_data = load_vemco('/Users/stephenscherrer/Dropbox/Lab Folder/Oahu Receiver Data Files/VUE_Export_2016-January-11.csv')
head(vue_data)
unique(vue_data$tag_id)
View(tagging_data)
unique(vue_data$receivers)
unique(vue_data$receiver)
vue_data = load_vemco('/Users/stephenscherrer/Dropbox/Lab Folder/Oahu Receiver Data Files/VUE_Export_2016-January-11.csv')
unique(vue_data$receiver)
=
rm(list=ls()) # Clear workspace
setwd('/Users/stephenscherrer/Documents/Work/UH/Projects/dissertation work/Spacial Ecology/Bottomfish Analysis Feb 2015/Output Files')
rm(list=ls()) # Clear workspace
setwd('/Users/stephenscherrer/Documents/Work/UH/Projects/dissertation work/Spacial Ecology/Bottomfish Analysis Feb 2015/Output Files')
getwd()
setwd('/Users/stephenscherrer/Documents/Work/UH/Projects/dissertation work/Spacial Ecology/Bottomfish Analysis Feb 2015/Output Files')
rm(list=ls()) # Clear workspace
library("matlab", lib.loc)
library('maps')
library('mapdata')
library('maptools')  # for shapefiles
library('scales')  # for transparency
library('ggmap')
source('/Users/stephenscherrer/Documents/Programming/R/utility_functions.R')
library('reshape') # merge_all
library('marmap') #
source('/Users/stephenscherrer/Documents/Work/UH/Projects/dissertation work/Spacial Ecology/Bottomfish Analysis Feb 2015/R Code/bf_analysis_functions.R')
library('plotly')
library('doParallel')
vue_data = load_vemco(filename = 'VUE_Export_2016-January-11.csv', filepath ='/Users/stephenscherrer/Dropbox/Lab Folder/Oahu Receiver Data Files/')
receiver_data = load_receiver(filename = 'DEPLOYMENT_RECOVERY_LOG.csv', filepath = '/Users/stephenscherrer/Dropbox/Lab Folder/Oahu Receiver Data Files/')
tagging_data = load_tagging_data('/Users/stephenscherrer/Dropbox/Lab Folder/Oahu Receiver Data Files/Bottomfish_Tag_Master.csv')
tag_ids = c(898:927, 18249:18275, 57445:57466, 37965:37985)
n_detections = list()
n_detections$total = dim(vue_data)[1] # Total number of detections from all tags
vue_data = vue_data[vue_data$tag_id %in% tag_ids, ]
n_detections$study = dim(vue_data)[1]
tag_ids = c(898:927, 18249:18275, 57445:57466, 37965:37985)
n_detections = list()
n_detections$total = dim(vue_data)[1] # Total number of detections from all tags
vue_data = vue_data[vue_data$tag_id %in% tag_ids, ]
n_detections$study = dim(vue_data)[1]
n_detections
build_detection_matrix = function(vue_df){
## Outputs a matrix where each row corrosponds to a unique tag in the vue database
## and each column corrosponds to a unique receiver. Values of each index are the number
## of detections for each tag at a particular location.
detection_matrix = matrix(nrow = length(unique(as.numeric(as.character(vue_df$tag_id)))),
ncol = length(unique(vue_df$station)))
# dim(detection_matrix)
for(i in 1:dim(detection_matrix)[1]){
for(j in 1:dim(detection_matrix)[2]){
detection_matrix[i,j] = dim(vue_df[which(vue_df$tag_id == unique(vue_df$tag_id)[i] &
vue_df$station == unique(vue_df$station)[j]), ])[1]
}
}
rownames(detection_matrix) = unique(as.character(vue_df$tag_id))
colnames(detection_matrix) = unique(as.character(vue_df$station))
return(detection_matrix)
}
tag_detection_matrix = build_detection_matrix(vue_data)
as.POSIXct("03-01-2015")
as.POSIXct("3-01-2015")
as.POSIXct("03-01-2015", format = "%mm-%dd-%YYY")
as.POSIXct
?as.POSIXct
as.POSIXct("03-01-2015", format = "%mm-%dd-%YYY", tz = 'HST')
"03-01-2015", format = "%m-%d-%Y", tz = 'HST')
as.POSIXct("03-01-2015", format = "%m-%d-%Y", tz = 'HST')
vue_data$datetime[1]
vue_data = vue_data[vue_data$datetime > as.POSIXct("03-01-2015", format = "%m-%d-%Y", tz = 'HST'), ]
min(vue_data$datetime)
vue_data$tag_id = as.character(vue_data$tag_id)
vue_data$station = as.character(vue_data$station)
unique(vue_data$station)
tag_detection_matrix = build_detection_matrix(vue_data)
View(tag_detection_matrix)
?sum
sum(tag_detection_matrix)
sum(tag_detection_matrix, 2)
?rowsum
rowsum(tag_detection_matrix)
for(i in 1:nrows(tag_detection_matrix)){sum(tag_detection_matrix[i, ])}
for(i in 1:nrow(tag_detection_matrix)){sum(tag_detection_matrix[i, ])}
for(i in 1:nrow(tag_detection_matrix)){print(sum(tag_detection_matrix[i, ]))}
n_tag_detections = c()
for(i in 1:nrow(tag_detection_matrix)){
n_tag_detections = c(n_tag_detections, sum(tag_detection_matrix[i, ]))
}
n_tag_detections
present_absent_table = tag_detection_matrix/tag_detection_matrix
present_absent_table
?sum()
present_absent_matrix = tag_detection_matrix/tag_detection_matrix
n_tag_stations = c()
for(i in 1:nrow(present_absent_matrix)){
n_tag_stations = c(n_tag_stations, sum(present_absent_matrix[i, ], na.rm = TRUE))
}
n_tag_stations
length(n_tag_stations)
length(n_tag_stations>1)
length(n_tag_stations>=1)
n_tag_stations>1
length(n_tag_stations>=1 == TRUE)
length((n_tag_stations>=1)==TRUE)
length(which((n_tag_stations>=1)==TRUE))
?isTRUE
length(isTRUE(n_tag_stations>=1))
isTRUE(n_tag_stations>= 1)
which(n_tag_stations >= 1)
n_tag_stations >= 1
isTRUE(n_tag_stations > 1)
length(which(n_tag_stations > 1))
23/18
18/23
length(which(n_tag_stations >= 2))
?matrix()
time_at_liberty = function(vue_df){
time_at_liberty_matrix =  matrix(ncol = 1, nrow = length())
for(i in 1:length(unique(vue_data$tag_id))){
time_at_liberty_matrix[i,1] = dim(vue_data[vue_data$tag_id == unique(vue_data$tag_id)[i], ])[1]
}
return(time_at_liberty_matrix)
}
time_at_liberty(vue_data)
unique(vue_data$tag_id)
length(unique(vue_data$tag_id)
)
1:length(unique(vue_data$tag_id))
## Determining days at liberty for each tag
time_at_liberty = function(vue_df){
time_at_liberty_matrix =  matrix(ncol = 1, nrow = length())
for(i in 1:length(unique(vue_df$tag_id))){
time_at_liberty_matrix[i,1] = dim(vue_df[vue_df$tag_id == unique(vue_df$tag_id)[i], ])[1]
}
return(time_at_liberty_matrix)
}
time_at_liberty(vue_data)
## Determining days at liberty for each tag
time_at_liberty = function(vue_df){
time_at_liberty_matrix =  matrix(ncol = 1, nrow = length())
for(i in 1:length(unique(vue_df$tag_id))){
time_at_liberty_matrix[i,1] = dim(vue_df[vue_df$tag_id == unique(vue_df$tag_id)[i], ])[1]
}
return(time_at_liberty_matrix)
}
time_at_liberty(vue_data)
length(unique(vue_df$tag_id))
vue_df = vue_data
for(i in 1:length(unique(vue_df$tag_id))){
time_at_liberty_matrix[i,1] = dim(vue_df[vue_df$tag_id == unique(vue_df$tag_id)[i], ])[1]
}
i
time_at_liberty = function(vue_df){
time_at_liberty_matrix =  matrix(ncol = 1, nrow = length(unique(vue_df$tag_id)))
for(i in 1:length(unique(vue_df$tag_id))){
time_at_liberty_matrix[i,1] = dim(vue_df[vue_df$tag_id == unique(vue_df$tag_id)[i], ])[1]
}
return(time_at_liberty_matrix)
}
time_at_liberty(vue_data)
?difftime
difftime(indv_data$datetime[length(indv_data$datetime)], indv_data$datetime[1])
}
difftime(indv_data$datetime[length(indv_data$datetime)], indv_data$datetime[1])
time_at_liberty = function(vue_df){
time_at_liberty_matrix =  matrix(ncol = 1, nrow = length(unique(vue_df$tag_id)))
for(i in 1:length(unique(vue_df$tag_id))){
indv_data = vue_df[vue_df$tag_id == unique(vue_df$tag_id)[i], ]
time_at_liberty_matrix = difftime(indv_data$datetime[length(indv_data$datetime)], indv_data$datetime[1], units = "days")
}
return(time_at_liberty_matrix)
}
time_at_liberty(vue_data)
tm = time_at_liberty(vue_data)
tm
## Determining days at liberty for each tag
time_at_liberty = function(vue_df){
time_at_liberty_matrix =  matrix(ncol = 1, nrow = length(unique(vue_df$tag_id)))
for(i in 1:length(unique(vue_df$tag_id))){
indv_data = vue_df[vue_df$tag_id == unique(vue_df$tag_id)[i], ]
time_at_liberty_matrix[i] = difftime(indv_data$datetime[length(indv_data$datetime)], indv_data$datetime[1], units = "days")
}
return(time_at_liberty_matrix)
}
tm = time_at_liberty(vue_data)
tm
floor_Date
floor_date
floordate
floor.date
date.floor
floor.POSIXt(vue_data$datetime)
floor.POSIXct(vue_data$datetime)
library('lubridate')
date()
floordate
floor.date
date.floor
floor_date
days_detected = matrix(ncol = 1, nrow = length(unique(vue_df$tag_id)))
for(i in 1:length(unique(vue_df$tag_id))){
indv_data = vue_df[vue_df$tag_id == unique(vue_df$tag_id)[i], ]
unqieu(floor_date(indv_data$datetime))
}
days_detected[i] = unique(floor_date(indv_data$datetime))
total_days_detected = function(vue_db){
days_detected = matrix(ncol = 1, nrow = length(unique(vue_df$tag_id)))
for(i in 1:length(unique(vue_df$tag_id))){
indv_data = vue_df[vue_df$tag_id == unique(vue_df$tag_id)[i], ]
days_detected[i] = unique(floor_date(indv_data$datetime))
}
return(days_detected)
}
total_days_detected(vue_data)
i = 2
indv_data = vue_df[vue_df$tag_id == unique(vue_df$tag_id)[i], ]
unique(floor_date(indv_data$datetime))
floor_date(indv_data$datetime)
days_detected[i] = unique(floor_date(indv_data$datetime, unit = 'day'))
unique(floor_date(indv_data$datetime, unit = 'day'))
days_detected[i] = length(unique(floor_date(indv_data$datetime, unit = 'day')))
days_detected[i]
total_days_detected = function(vue_db){
days_detected = matrix(ncol = 1, nrow = length(unique(vue_df$tag_id)))
for(i in 1:length(unique(vue_df$tag_id))){
indv_data = vue_df[vue_df$tag_id == unique(vue_df$tag_id)[i], ]
days_detected[i] = length(unique(floor_date(indv_data$datetime, unit = 'day')))
}
return(days_detected)
}
total_days_detected(vue_data)
n_tag_stations
n_tag_stations[16]
n_tag_stations[12]
n_tag_stations[3]
unique(vue_data$tag_ids)
unique(vue_data$tag_id)
install.packages
install.packages('rjags')
rjags
??rjags
library('rjags')
??rjags
library('rjags')
library('rjags')
#### Clearning Workspace and setting directory ------------------------------------
rm(list=ls()) # Clear workspace
setwd('/Users/stephenscherrer/Documents/Work/UH/Projects/dissertation work/Opakapaka Tagging/Opakapaka Tagging Analysis/')
#### Importing principle dependencies----------------------------------------------
# install.packages('wesanderson') # color palett for plotting
# install.packages('matlab')
# install.packages('maps')
# install.packages('mapdata')
# install.packages('maptools')
# install.packages('scales')
# install.packages('ggmap')
library("matlab", lib.loc)
library('maps')
library('mapdata')
library('maptools')  # for shapefiles
library('scales')  # for transparency
library('ggmap')
source('/Users/stephenscherrer/Documents/Programming/R/utility_functions.R')
library('reshape') # merge_all
library('marmap') #
source('/Users/stephenscherrer/Documents/Work/UH/Projects/dissertation work/Spacial Ecology/Bottomfish Analysis Feb 2015/R Code/bf_analysis_functions.R')
library('plotly')
library('lubridate')
library('doParallel')
#### Importing Data Files ---------------------------------------------------------
vue_data = load_vemco(filename = 'VUE_Export_2016-January-11.csv', filepath ='/Users/stephenscherrer/Dropbox/Lab Folder/Oahu Receiver Data Files/')
receiver_data = load_receiver(filename = 'DEPLOYMENT_RECOVERY_LOG.csv', filepath = '/Users/stephenscherrer/Dropbox/Lab Folder/Oahu Receiver Data Files/')
tagging_data = load_tagging_data('/Users/stephenscherrer/Dropbox/Lab Folder/Oahu Receiver Data Files/Bottomfish_Tag_Master.csv')
vue_data$tag_id = as.character(vue_data$tag_id)
vue_data$station = as.character(vue_data$station)
#### Cleaning Data ------------------------------------------------------------------------
### Removing all tags not associated with study from vue
tag_ids = c(898:927, 18249:18275, 57445:57466, 37965:37985)
### limiting dates to everything that's been tagged since march
vue_data = vue_data[vue_data$datetime > as.POSIXct("03-01-2015", format = "%m-%d-%Y", tz = 'HST'), ]
n_detections = list()
n_detections$total = dim(vue_data)[1] # Total number of detections from all tags
## 348344 total detections as of 11 January 2016
vue_data = vue_data[vue_data$tag_id %in% tag_ids, ]
n_detections$study = dim(vue_data)[1]
# 234505 paka detections as of 11 January 2016
### Removing stations not associated with study (from range testin)
vue_data = vue_data[which(vue_data$station != "50m Shallow Doughnut Test 260ms blank" & vue_data$station != "Doughnut Test 220m 260 blanking" & vue_data$station != "Diamond Head"), ]
### Cleaning station names to match deployment master
vue_data$lat = as.numeric(vue_data$lat)
vue_data$lon = as.numeric(vue_data$lon)
for(i in 1:length(receiver_data$station_name)){
vue_data$station[which(vue_data$receiver == receiver_data$vr2w_serial[i] &
vue_data$datetime >= receiver_data$deployment_date[i] &
vue_data$datetime <= receiver_data$recovery_date[i])] =
as.character(receiver_data$station_name[i])
vue_data$lat[which(vue_data$receiver == receiver_data$vr2w_serial[i] &
vue_data$datetime >= receiver_data$deployment_date[i] &
vue_data$datetime <= receiver_data$recovery_date[i])] =
as.character(receiver_data$lat[i])
vue_data$lon[which(vue_data$receiver == receiver_data$vr2w_serial[i] &
vue_data$datetime >= receiver_data$deployment_date[i] &
vue_data$datetime <= receiver_data$recovery_date[i])] =
as.numeric(receiver_data$lon[i])
}
transmitter_interval = 60
fake_data = vue_data[1:1000, ]
remove_false_detections = function(vue_data, transmitter_interval = 60, remove_detections = TRUE){
tf_detection_index = c()
registerDoParallel(cores = 8)
tf_detection_index = foreach(i = c(1:length(unique(vue_data$datetime))), .combine = c) %dopar%{
return(any(vue_data$tag_id[i] == vue_data$tag_id     &
vue_data$receiver[i] == vue_data$receiver &
abs(vue_data$datetime - vue_data$datetime[i]) <= (30 * transmitter_interval)
) == TRUE)
}
if(remove_detections == TRUE){
vue_data = vue_data[tf_detection_index == TRUE, ]
return(vue_data)
}else{
return(tf_detection_index)
}
}
fd = remove_false_detections(fake_data)
fake_data = vue_data[1:5000, ]
fd = remove_false_detections(fake_data)
remove_false_detections = function(vue_data, transmitter_interval = 60, remove_detections = TRUE){
script_timer = proc.time()
tf_detection_index = c()
registerDoParallel(cores = 8)
tf_detection_index = foreach(i = c(1:length(unique(vue_data$datetime))), .combine = c) %dopar%{
return(any(vue_data$tag_id[i] == vue_data$tag_id     &
vue_data$receiver[i] == vue_data$receiver &
abs(vue_data$datetime - vue_data$datetime[i]) <= (30 * transmitter_interval)
) == TRUE)
}
print(proc.time() - script_timer) # Stop the clock
if(remove_detections == TRUE){
vue_data = vue_data[tf_detection_index == TRUE, ]
return(vue_data)
}else{
return(tf_detection_index)
}
}
fd = remove_false_detections(fake_data)
fd= vue_data[1:100, ]
fd = remove_false_detections(fake_data)
fake_data = vue_data[1:100, ]
fd = remove_false_detections(fake_data)
fake_data = vue_data[1:1000, ]
fd = remove_false_detections(fake_data)
fd = remove_false_detections(fake_data)
fake_data = vue_data[1:10000, ]
fd = remove_false_detections(fake_data)
unique(vue_data$tag_id)
30*10
300/60
length(vue_data$tag_id)/8
new_data = remove_false_detections(vue_data)
1821/60
vue_data$datetime - vue_data$datetime[i]
which(vue_data$datetime - vue_data$datetime[i]<30)
vue_data$datetime[i]
vue_data$datetime[1]
vue_data$datetime[2]
vue_data$datetime[157]
vue_data$datetime[2] - vue_data$datetime[i]
difftime()
?difftime()
time_vec = rep(vue_data$datetime[1], length(vue_data$datetime))
time_vec
difftime(time1 = time_vec, time2 = vue_data$datetime)
difftime(time1 = time_vec, time2 = vue_data$datetime, units = "secs")
i
any(vue_data$tag_id[i] == vue_data$tag_id     &
vue_data$receiver[i] == vue_data$receiver &
abs(difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime), units = "secs") <= (30 * transmitter_interval)
) == TRUE
difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime), units = "secs")
abs(difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime, units = "secs") <= (30 * transmitter_interval)
) == TRUE)
abs(difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime, units = "secs") <= (30 * transmitter_interval
)
)
any(vue_data$tag_id[i] == vue_data$tag_id     &
vue_data$receiver[i] == vue_data$receiver &
abs(difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime, units = "secs") <= (30 * transmitter_interval
)
)
)
any(vue_data$tag_id[i] == vue_data$tag_id     &
vue_data$receiver[i] == vue_data$receiver &
abs(difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime, units = "secs")) <= (30 * transmitter_interval)) == TRUE)
any(vue_data$tag_id[i] == vue_data$tag_id     &
vue_data$receiver[i] == vue_data$receiver &
abs(difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime, units = "secs")) <= (30 * transmitter_interval)) == TRUE
which(vue_data$tag_id[i] == vue_data$tag_id     &
vue_data$receiver[i] == vue_data$receiver &
abs(difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime, units = "secs")) <= (30 * transmitter_interval)) == TRUE
which(vue_data$tag_id[i] == vue_data$tag_id     &
vue_data$receiver[i] == vue_data$receiver &
abs(difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime, units = "secs")) <= (30 * transmitter_interval)) == TRUE
any(vue_data$tag_id[i] == vue_data$tag_id     &
vue_data$receiver[i] == vue_data$receiver &
abs(difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime, units = "secs")) <= (30 * transmitter_interval)) == TRUE
which(difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime, units = "secs")) <= (30 * transmitter_interval
)
which(difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime, units = "secs") <= (30 * transmitter_interval)
)
which(abs(difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime, units = "secs")) <= (30 * transmitter_interval) == TRUE)
which((abs(difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime, units = "secs")) <= (30 * transmitter_interval)) == TRUE)
any(vue_data$tag_id[i] == vue_data$tag_id     &
vue_data$receiver[i] == vue_data$receiver &
(abs(difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime, units = "secs")) <= (30 * transmitter_interval)) == TRUE)
which(vue_data$tag_id[i] == vue_data$tag_id     &
vue_data$receiver[i] == vue_data$receiver &
(abs(difftime(time1 = rep(vue_data$datetime[i], length(vue_data$datetime)),
time2 = vue_data$datetime, units = "secs")) <= (30 * transmitter_interval)) == TRUE)
vue_data$datetime[138]
vue_data$datetime[i]
new_data = remove_false_detections(vue_data)
library('rjags')
?loadNamespace
install.packages('rjags')
library('rjags')
new_index = remove_false_detections(vue_data, remove_detections = FALSE)
which(new_index == FALSE)
which(new_index == TRUE)
